/*
 * Main.java - Entry point for the application
 */

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        MathQuiz mathQuiz = new MathQuiz(scanner);
        ExpenseManager expenseManager = new ExpenseManager();

        while (true) {
            System.out.println("\n--- Main Menu ---");
            System.out.println("1. Take Math Quiz");
            System.out.println("2. Manage Expenses");
            System.out.println("3. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1 -> mathQuiz.startQuiz();
                case 2 -> expenseManager.run();
                case 3 -> System.exit(0);
                default -> System.out.println("Invalid choice. Try again.");
            }
        }
    }
}

/*
 * MathQuiz.java - Handles math quiz functionality
 */

import java.util.*;

class MathQuiz {
    private final Scanner scanner;
    private int score;

    public MathQuiz(Scanner scanner) {
        this.scanner = scanner;
        this.score = 0;
    }

    public void startQuiz() {
        score = 0;
        System.out.println("\n--- Math Quiz ---");
        for (int i = 0; i < 5; i++) {
            Random rand = new Random();
            int a = rand.nextInt(10);
            int b = rand.nextInt(10);
            char[] ops = {'+', '-', '*'};
            char op = ops[rand.nextInt(ops.length)];

            int correct = switch (op) {
                case '+' -> a + b;
                case '-' -> a - b;
                case '*' -> a * b;
                default -> 0;
            };

            System.out.printf("%d %c %d = ", a, op, b);
            int answer = scanner.nextInt();

            if (answer == correct) {
                System.out.println("Correct!");
                score++;
            } else {
                System.out.println("Wrong. Correct answer: " + correct);
            }
        }
        System.out.println("Quiz Over! Your score: " + score + "/5");
    }
}

/*
 * ExpenseManager.java - Handles expense management with SQLite
 */

import java.sql.*;
import java.util.*;

class ExpenseManager {
    private final Scanner scanner = new Scanner(System.in);
    private final String DB_URL = "jdbc:sqlite:expenses.db";

    public ExpenseManager() {
        try (Connection conn = DriverManager.getConnection(DB_URL)) {
            String createTable = "CREATE TABLE IF NOT EXISTS expenses ("
                    + "id INTEGER PRIMARY KEY AUTOINCREMENT,"
                    + "amount REAL,"
                    + "category TEXT,"
                    + "date TEXT)";
            conn.createStatement().execute(createTable);
        } catch (SQLException e) {
            System.out.println("Database error: " + e.getMessage());
        }
    }

    public void run() {
        while (true) {
            System.out.println("\n--- Expense Manager ---");
            System.out.println("1. Add Expense");
            System.out.println("2. View Expenses");
            System.out.println("3. Delete Expense");
            System.out.println("4. Back to Main Menu");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1 -> addExpense();
                case 2 -> viewExpenses();
                case 3 -> deleteExpense();
                case 4 -> {
                    return;
                }
                default -> System.out.println("Invalid choice.");
            }
        }
    }

    private void addExpense() {
        System.out.print("Enter amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // consume newline
        System.out.print("Enter category: ");
        String category = scanner.nextLine();
        System.out.print("Enter date (YYYY-MM-DD): ");
        String date = scanner.nextLine();

        String sql = "INSERT INTO expenses (amount, category, date) VALUES (?, ?, ?)";
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setDouble(1, amount);
            pstmt.setString(2, category);
            pstmt.setString(3, date);
            pstmt.executeUpdate();
            System.out.println("Expense added.");
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void viewExpenses() {
        String sql = "SELECT * FROM expenses";
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            System.out.println("\nID | Amount | Category | Date");
            while (rs.next()) {
                System.out.printf("%d | %.2f | %s | %s\n",
                        rs.getInt("id"),
                        rs.getDouble("amount"),
                        rs.getString("category"),
                        rs.getString("date"));
            }
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void deleteExpense() {
        System.out.print("Enter expense ID to delete: ");
        int id = scanner.nextInt();

        String sql = "DELETE FROM expenses WHERE id = ?";
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, id);
            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                System.out.println("Expense deleted.");
            } else {
                System.out.println("Expense ID not found.");
            }
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
